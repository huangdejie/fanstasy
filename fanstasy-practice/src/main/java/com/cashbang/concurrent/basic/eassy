synchronized:
    偏向锁：当一个线程访问加了同步锁的代码块时，会在对象头中存储当前线程的ID，后续这个线程进入和退出这段加了同步锁的代码块时，
        不需要再次加锁和释放锁。而是直接比较对象头里面 是否存储了只想当前线程的偏向锁。如果相等表示偏向锁是偏向于当前线程的，
        就不需要再次尝试获取锁
        获取：
        1、首先获取锁对象的MarkWord，判断是否处于可偏向状态(biased_lock=1,且ThreadId为空)
        2、如果是可偏向状态，则通过CAS操作，把当前线程ID写入到MarkWord
            a)若CAS成功，那么表示已经获得了锁对象的偏向锁，接着执行同步代码块
            b)若CAS失败，说明有其它线程已经获得了偏向锁，这种情况说明当前锁存在竞争，需要撤销已获得偏向锁的线程，并且把它持有的锁
                升级为轻量级锁
        3、如果是已偏向状态，需要检查markWord中存储的ThreadID是否等于当前线程的ThreadID
            a)如果相等，不需要再次获得锁，可直接执行同步代码块
            b)如果不相等，说明当前锁偏向于其它线程，需要撤销偏向锁并升级到轻量级锁